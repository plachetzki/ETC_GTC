#replot
pa<-ggtree(atrFilt,right=T,layout='roundrect') +  geom_tiplab(aes(subset=grepl("EGind",label)==F & isTip),color="black",size=1) + geom_tiplab(aes(subset=grepl("EGind",label)),color="aquamarine3",size=1)+ xlim(0,100) #+  geom_point2(aes(subset = as.numeric(sub(".*/", "", label))>90 & !isTip),size=2)
pa
#replot
pa<-ggtree(atrFilt,right=T,layout='roundrect') +  geom_tiplab(aes(subset=grepl("EGind",label)==F & isTip),color="black",size=1) + geom_tiplab(aes(subset=grepl("EGind",label)),color="aquamarine3",size=1)+ xlim(0,10) #+  geom_point2(aes(subset = as.numeric(sub(".*/", "", label))>90 & !isTip),size=2)
pa
#source("https://bioconductor.org/biocLite.R"); biocLite("tximport"); install.packages("readr"); biocLite("edgeR")    #<-----uncomment & run if any not installed yet
#Bioconductor our out of date- run code below to install newer version
#if (!requireNamespace("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install(version = "3.12")
#BiocManager::install(c("tximport", "edgeR", "biocLite"))
library(tidyr); library(dplyr)
library(cowplot)
library(ggtree)
library(tximport); library(readr); library(edgeR); library(limma)
library(ggplot2)
library(this.path)
dir <-this.dir()
setwd(dir)
list.files()
#in your wd make a text file named libraries_to_stages.txt - this should have 2 columns - the first is the name
#of your sample and the second (separated by a space) is the group number it belongs to (so the stage)
#Make a dir in your cwd named mapping - place all of your output dirs for each sample that was outputted by salmon in this dir
#library info file
sample_meta<-read.table("libraries_to_stages_ES_ind1.txt",header=F,row.names=1)
colnames(sample_meta)<-"group"
skin<-rownames(sample_meta)[which(sample_meta$group=="skin")]; skinfiles <- file.path(dir, "mapping",skin, "quant.sf"); names(skinfiles)<-skin
sg<-rownames(sample_meta)[which(sample_meta$group=="slime_gland")]; sgfiles <- file.path(dir, "mapping",sg, "quant.sf"); names(sgfiles)<-sg
pdffile<-"ES_ind1.pdf"
##pick colors for each library type
skincol <- "darkgreen"
sgcol <- "darkred"
quantfiles<-c(skinfiles,sgfiles);
cols<-rep(c(skincol, sgcol),each=3) #change the last number to how many groups you have
################################
### Multidimensional scaling ###
################################
runEdgeRmds<-function(salmonquantfiles, colors,meta){
##  read in files with tximport
txi.salmon<- tximport(salmonquantfiles, type = "salmon", txOut=T, dropInfReps=TRUE)
cts <- txi.salmon$counts
print(colSums(cts))
keep <- rowSums(cpm(cts)>10.0) >= nrow(meta)
cts<- cts[keep,]
dim(cts)
print(colSums(cts))
group <- groups
y <- DGEList(counts=cts ,group=meta$group)
y <- calcNormFactors(y)
y <-estimateCommonDisp(y)
y <- estimateTagwiseDisp(y, prior.n=16) # TagwiseDisp n-value should be close to: 50/(#samples - #groups) = 50/(36-6) = 50/30 =1.66
plotMDS.DGEList(y , main = "MDS Plot for Count Data", labels = colnames(y),col=colors, xpd = TRUE)
legend(1.25,0.2 ,legend=paste("Stage ",levels(as.factor(meta$group))),text.col=colors[seq(1,length(colors),3)], xpd = TRUE, cex = 0.75) #change the last number to how many groups you have
}
#runEdgeRmds(quantfiles,cols,sample_meta)
##############################################
### pairwise comparisons between libraries ###
##############################################
runEdgeRpwise<-function(salmonquantfiles,colors,meta){
##  read in files with tximport
txi.salmon<- tximport(salmonquantfiles, type = "salmon", txOut=T, dropInfReps=TRUE)
cts <- txi.salmon$counts
print(colSums(cts))
# tags2find<-read.csv("EGtags.csv",header=T) #MSP
# cts[tags2find$transcript.name,]
#keep <- rowSums(cpm(cts)>10.0) >= length(groups) #keeps tags which are 10+ in every library
keep <- rowSums(cpm(cts)>10.0) >= 3 #MSP keeps tags which are 10+ in at least 3 libraries
cts<- cts[keep,]
dim(cts)
y <- DGEList(counts=cts ,group=meta$group)
y <- calcNormFactors(y)
y<-estimateCommonDisp(y)
# TagwiseDisp n-value should be close to: 50/(#samples - #groups) = 50/(36-6) = 50/30 =1.666667
y <- estimateTagwiseDisp(y, prior.n=16)
group<-levels(as.factor(meta$group))
et<-exactTest(y, pair=c(group[1],group[2]))
tab<-summary(de <- decideTestsDGE(et, p=0.0001, adjust="BH"))
n<-tab[1]+tab[3]
detags <- rownames(y)[as.logical(de)]
plotSmear(et, de.tags=detags, main="DGE Exact Test")
abline(h = c(-2, 2), col = "blue")
abline(h = c(-4, 4), col = "blue")
plotMDS.DGEList(y , main = "MDS Plot for Count Data", col=colors)
textcol<-colors[seq(1,length(colors),5)]
legend("bottomright",legend=group,text.col= textcol)
plotBCV(y, main="BCV plot")
meanVarPlot <- plotMeanVar(estimateCommonDisp(y) , show.raw.vars=TRUE,
show.tagwise.vars=TRUE,
show.binned.common.disp.vars=FALSE,
show.ave.raw.vars=FALSE , NBline=TRUE,
nbins=100,
pch=16,
xlab="Mean Expresion (Log10)",
ylab="Variance (Log10)",
main="Mean-Variance Plot")
#positive FC: higher in group2 than 1
return(list(topTags(et, n=n),et,cts))
}
pdf(file=pdffile,width=11, height=8)
#evaluate skin vs slime gland
par(mfrow=c(2,2),oma=c(1,1,2,0))
SKvSG<-runEdgeRpwise(quantfiles,cols,sample_meta)
title("Skin vs Slime Gland",outer=T)
write.table(SKvSG[1], "SKvSG_edgeR_output.txt", sep="\t")
#read trees
#read trees and match tips to assembly tags
#atr<-read.tree("4_4_alpha.tre")
#atr<-read.tree("4_1_C.tre")
atr<-read.tree("../trees/alpha.txt")
atr$tip.label<-unlist(lapply(atr$tip.label,function(x) strsplit(x,"..",fixed=T)[[1]][[1]])) %>% gsub("'","",.,fixed=T)
atr$tip.label<-gsub("-.*","",atr$tip.label)
atr$tip.label<-gsub("(Estoutii_\\d+)_\\d+","\\1",atr$tip.label,perl=T)
par(mfrow=c(1,1),oma=c(0,0,0,0))
#plot(atr)
#gtr<-read.tree("4_1_gamma.tre")
gtr<-read.tree("../trees/gamma.txt")
gtr$tip.label<-unlist(lapply(gtr$tip.label,function(x) strsplit(x,"..",fixed=T)[[1]][[1]])) %>% gsub("'","",.,fixed=T)
gtr$tip.label<-gsub("-.*","",gtr$tip.label)
gtr$tip.label<-gsub("(Estoutii_\\d+)_\\d+","\\1",gtr$tip.label,perl=T)
#pa<-ggtree(atr,right=T,layout='roundrect') + geom_tiplab(color="aquamarine3",size=1) + xlim(0,6)
#pg<-ggtree(gtr,right=T,layout='roundrect') + geom_tiplab(color="darkmagenta",size=1) + xlim(0,6)
res<-data.frame(SKvSG[[2]]$table) #all tags with pvals
toptags<-data.frame(SKvSG[[1]]) #only signif tags, with FDR
my_tagsA<-atr$tip.label[atr$tip.label %in% rownames(res)]
my_tagsG<-gtr$tip.label[gtr$tip.label %in% rownames(res)]
#my_tags<-c("E_goslinei_t.44783","E_goslinei_t.102104") #your genes of interest by name
#my_tags<-rownames(res)[res$logCPM>12] #your genes of interest by abundance
#my_tags<-rownames(res)[res$PValue<0.001] #your genes of interest by significance
highlight_dfA <- res[my_tagsA,]
highlight_dfG <- res[my_tagsG,]
#save alpha and gamma rows from edgeR
tmp<-toptags %>% tibble::rownames_to_column(var="tag")
tmp2<-rbind.data.frame(highlight_dfA,highlight_dfG) %>% tibble::rownames_to_column(var="tag")
out<-dplyr::left_join(tmp2,tmp)
#add counts for tags of interest
mycts<-data.frame(SKvSG[[3]]) %>% tibble::rownames_to_column(var="tag")
out<-left_join(out,mycts)
write.table(out, "ESind1_alpha_gamma_edgeR.txt", sep="\t")
#prune out tips from tree not in filtered tags
#keep other species for context
if(file.exists("../EG_ind4/EGind4_alpha_gamma_edgeR.txt")){
tmp<-read.table("../EG_ind4/EGind4_alpha_gamma_edgeR.txt")
bothtags<-c(out$tag,tmp$tag)
tophagA<-which(atr$tip.label %in% bothtags); nothagA<-grep("EGind|Estoutii",atr$tip.label,invert=T)
atrFilt<-ape::keep.tip(atr,c(tophagA,nothagA))
tophagG<-which(gtr$tip.label %in% bothtags); nothagG<-grep("EGind|Estoutii",gtr$tip.label,invert=T)
gtrFilt<-ape::keep.tip(gtr,c(tophagG,nothagG))
#replot
pa<-ggtree(atrFilt,right=T,layout='roundrect') +  geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) + geom_tiplab(aes(subset=grepl("Estout",label)),color="aquamarine3",size=1)+ xlim(0,6) #+  geom_point2(aes(subset = as.numeric(sub(".*/", "", label))>90 & !isTip),size=2)
pg<-ggtree(gtrFilt,right=T,layout='roundrect')  + geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) + geom_tiplab(aes(subset=grepl("Estout",label)),color="darkmagenta",size=1) + xlim(0,6)# +    geom_point2(aes(subset = as.numeric(sub(".*/", "", label))>90 & !isTip),size=2)
}
highlight_df2 <- res[rownames(res) %in% rownames(toptags),]
highlight_nonsig <- res[!(rownames(res) %in% rownames(toptags)),]
p1<-ggplot(res,aes(x=logCPM,y=logFC)) +
labs(x="Mean transcript abundance (log CPM)", y="Differential expression (log FoldChange)") +
geom_point(data=highlight_nonsig, aes(x=logCPM,y=logFC),col="black",alpha=0.2,size=2) +
geom_point(data=highlight_df2,aes(x=logCPM,y=logFC,col="red"),alpha=0.2,size=2)  +
geom_point(data=highlight_dfA, aes(x=logCPM,y=logFC),pch=2,size=3,color="aquamarine3") +
geom_point(data=highlight_dfG, aes(x=logCPM,y=logFC),pch=2,size=3,color="darkmagenta") + theme(legend.position = "none") +
ggrepel::geom_text_repel(data=highlight_dfA,aes(x=logCPM,y=logFC,label=rownames(highlight_dfA)),size = 2) +
ggrepel::geom_text_repel(data=highlight_dfG,aes(x=logCPM,y=logFC,label=rownames(highlight_dfG)),size = 2) + theme_classic() +theme(legend.position = "none")
rightplots<-plot_grid(pa,pg,ncol=1,align="v",labels=c("B","C"))
cp<-plot_grid(p1,rightplots,ncol=2,labels=c("A",""),rel_widths = c(1.5,1))
ggdraw(add_sub(cp,"Figure. Differentially expressed transcripts for alpha and gamma in ESind1. Transcript abundance and differential expression are shown, \nwith transcripts with significant expression differences in red (FDR < 0.0001). Negative logFC values indicate higher expression in slime gland compared to skin. \nTranscripts corresponding to alpha and gamma are annotated. Phylogenetic identification of alpha (B) and gamma (C).",x=0,hjust=0,size=10))
dev.off()
#source("https://bioconductor.org/biocLite.R"); biocLite("tximport"); install.packages("readr"); biocLite("edgeR")    #<-----uncomment & run if any not installed yet
#Bioconductor our out of date- run code below to install newer version
#if (!requireNamespace("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install(version = "3.12")
#BiocManager::install(c("tximport", "edgeR", "biocLite"))
library(tidyr); library(dplyr)
library(cowplot)
library(ggtree)
library(tximport); library(readr); library(edgeR); library(limma)
library(ggplot2)
library(this.path)
dir <-this.dir()
setwd(dir)
list.files()
#in your wd make a text file named libraries_to_stages.txt - this should have 2 columns - the first is the name
#of your sample and the second (separated by a space) is the group number it belongs to (so the stage)
#Make a dir in your cwd named mapping - place all of your output dirs for each sample that was outputted by salmon in this dir
#library info file
sample_meta<-read.table("libraries_to_stages_EG_ind4.txt",header=F,row.names=1)
colnames(sample_meta)<-"group"
skin<-rownames(sample_meta)[which(sample_meta$group=="skin")]; skinfiles <- file.path(dir, "mapping",skin, "quant.sf"); names(skinfiles)<-skin
sg<-rownames(sample_meta)[which(sample_meta$group=="slime_gland")]; sgfiles <- file.path(dir, "mapping",sg, "quant.sf"); names(sgfiles)<-sg
pdffile<-"EG_ind4.pdf"
##pick colors for each library type
skincol <- "darkgreen"
sgcol <- "darkred"
quantfiles<-c(skinfiles,sgfiles);
cols<-rep(c(skincol, sgcol),each=3) #change the last number to how many groups you have
################################
### Multidimensional scaling ###
################################
runEdgeRmds<-function(salmonquantfiles, colors,meta){
##  read in files with tximport
txi.salmon<- tximport(salmonquantfiles, type = "salmon", txOut=T, dropInfReps=TRUE)
cts <- txi.salmon$counts
print(colSums(cts))
keep <- rowSums(cpm(cts)>10.0) >= nrow(meta)
cts<- cts[keep,]
dim(cts)
print(colSums(cts))
group <- groups
y <- DGEList(counts=cts ,group=meta$group)
y <- calcNormFactors(y)
y <-estimateCommonDisp(y)
y <- estimateTagwiseDisp(y, prior.n=16) # TagwiseDisp n-value should be close to: 50/(#samples - #groups) = 50/(36-6) = 50/30 =1.66
plotMDS.DGEList(y , main = "MDS Plot for Count Data", labels = colnames(y),col=colors, xpd = TRUE)
legend(1.25,0.2 ,legend=paste("Stage ",levels(as.factor(meta$group))),text.col=colors[seq(1,length(colors),3)], xpd = TRUE, cex = 0.75) #change the last number to how many groups you have
}
#runEdgeRmds(quantfiles,cols,sample_meta)
##############################################
### pairwise comparisons between libraries ###
##############################################
runEdgeRpwise<-function(salmonquantfiles,colors,meta){
##  read in files with tximport
txi.salmon<- tximport(salmonquantfiles, type = "salmon", txOut=T, dropInfReps=TRUE)
cts <- txi.salmon$counts
print(colSums(cts))
# tags2find<-read.csv("EGtags.csv",header=T) #MSP
# cts[tags2find$transcript.name,]
#keep <- rowSums(cpm(cts)>10.0) >= length(groups) #keeps tags which are 10+ in every library
keep <- rowSums(cpm(cts)>10.0) >= 3 #MSP keeps tags which are 10+ in at least 3 libraries
cts<- cts[keep,]
dim(cts)
y <- DGEList(counts=cts ,group=meta$group)
y <- calcNormFactors(y)
y<-estimateCommonDisp(y)
# TagwiseDisp n-value should be close to: 50/(#samples - #groups) = 50/(36-6) = 50/30 =1.666667
y <- estimateTagwiseDisp(y, prior.n=16)
group<-levels(as.factor(meta$group))
et<-exactTest(y, pair=c(group[1],group[2]))
tab<-summary(de <- decideTestsDGE(et, p=0.0001, adjust="BH"))
n<-tab[1]+tab[3]
detags <- rownames(y)[as.logical(de)]
plotSmear(et, de.tags=detags, main="DGE Exact Test")
abline(h = c(-2, 2), col = "blue")
abline(h = c(-4, 4), col = "blue")
plotMDS.DGEList(y , main = "MDS Plot for Count Data", col=colors)
textcol<-colors[seq(1,length(colors),5)]
legend("bottomright",legend=group,text.col= textcol)
plotBCV(y, main="BCV plot")
meanVarPlot <- plotMeanVar(estimateCommonDisp(y) , show.raw.vars=TRUE,
show.tagwise.vars=TRUE,
show.binned.common.disp.vars=FALSE,
show.ave.raw.vars=FALSE , NBline=TRUE,
nbins=100,
pch=16,
xlab="Mean Expresion (Log10)",
ylab="Variance (Log10)",
main="Mean-Variance Plot")
#positive FC: higher in group2 than 1
return(list(topTags(et, n=n),et,cts))
}
pdf(file=pdffile,width=11, height=8)
#evaluate skin vs slime gland
par(mfrow=c(2,2),oma=c(1,1,2,0))
SKvSG<-runEdgeRpwise(quantfiles, cols,sample_meta)
title("Skin vs Slime Gland",outer=T)
write.table(SKvSG[1], "SKvSG_edgeR_output.txt", sep="\t")
#read trees
#read trees and match tips to assembly tags
#atr<-read.tree("4_4_alpha.tre")
#atr<-read.tree("4_1_C.tre")
atr<-read.tree("../trees/alpha.txt")
atr$tip.label<-unlist(lapply(atr$tip.label,function(x) strsplit(x,"..",fixed=T)[[1]][[1]])) %>% gsub("'","",.,fixed=T)
atr$tip.label<-gsub("-.*","",atr$tip.label)
atr$tip.label<-gsub("(Estoutii_\\d+)_\\d+","\\1",atr$tip.label,perl=T)
par(mfrow=c(1,1),oma=c(0,0,0,0))
#plot(atr)
#gtr<-read.tree("4_1_gamma.tre")
gtr<-read.tree("../trees/gamma.txt")
gtr$tip.label<-unlist(lapply(gtr$tip.label,function(x) strsplit(x,"..",fixed=T)[[1]][[1]])) %>% gsub("'","",.,fixed=T)
gtr$tip.label<-gsub("-.*","",gtr$tip.label)
gtr$tip.label<-gsub("(Estoutii_\\d+)_\\d+","\\1",gtr$tip.label,perl=T)
pa<-ggtree(atr,right=T,layout='roundrect') + geom_tiplab(color="aquamarine3",size=1) + xlim(0,6)
pg<-ggtree(gtr,right=T,layout='roundrect') + geom_tiplab(color="darkmagenta",size=1) + xlim(0,6)
res<-data.frame(SKvSG[[2]]$table)
toptags<-data.frame(SKvSG[[1]])
my_tagsA<-atr$tip.label[atr$tip.label %in% rownames(res)]
my_tagsG<-gtr$tip.label[gtr$tip.label %in% rownames(res)]
#my_tags<-c("E_goslinei_t.44783","E_goslinei_t.102104") #your genes of interest by name
#my_tags<-rownames(res)[res$logCPM>12] #your genes of interest by abundance
#my_tags<-rownames(res)[res$PValue<0.001] #your genes of interest by significance
highlight_dfA <- res[my_tagsA,]
highlight_dfG <- res[my_tagsG,]
#save alpha and gamma rows from edgeR
tmp<-toptags %>% tibble::rownames_to_column(var="tag")
tmp2<-rbind.data.frame(highlight_dfA,highlight_dfG) %>% tibble::rownames_to_column(var="tag")
out<-dplyr::left_join(tmp2,tmp)
#add counts for tags of interest
mycts<-data.frame(SKvSG[[3]]) %>% tibble::rownames_to_column(var="tag")
out<-left_join(out,mycts)
write.table(out, "EGind4_alpha_gamma_edgeR.txt", sep="\t")
#prune out tips from tree not in filtered tags
#keep other species for context
if(file.exists("../ES_ind1/ESind1_alpha_gamma_edgeR.txt")){
tmp<-read.table("../ES_ind1/ESind1_alpha_gamma_edgeR.txt")
bothtags<-c(out$tag,tmp$tag)
tophagA<-which(atr$tip.label %in% bothtags); otherhagA<-which(atr$tip.label %in% tmp$tag)
nothagA<-grep("EGind|Estoutii",atr$tip.label,invert=T)
atrFilt<-ape::keep.tip(atr,c(tophagA,nothagA))
tophagG<-which(gtr$tip.label %in% bothtags); otherhagG<-which(gtr$tip.label %in% tmp$tag)
nothagG<-grep("EGind|Estoutii",gtr$tip.label,invert=T)
sort(c(otherhagG, nothagG))
gtrFilt<-ape::keep.tip(gtr,c(tophagG,nothagG))
#replot
pa<-ggtree(atrFilt,right=T,layout='roundrect') +  geom_tiplab(aes(subset=grepl("EGind",label)==F & isTip),color="black",size=1) + geom_tiplab(aes(subset=grepl("EGind",label)),color="aquamarine3",size=1)+ xlim(0,6) #+  geom_point2(aes(subset = as.numeric(sub(".*/", "", label))>90 & !isTip),size=2)
pg<-ggtree(gtrFilt,right=T,layout='roundrect')  + geom_tiplab(aes(subset=grepl("EGind",label)==F & isTip),color="black",size=1) + geom_tiplab(aes(subset=grepl("EGind",label)),color="darkmagenta",size=1) + xlim(0,6)# +    geom_point2(aes(subset = as.numeric(sub(".*/", "", label))>90 & !isTip),size=2)
}
highlight_df2 <- res[rownames(res) %in% rownames(toptags),]
highlight_nonsig <- res[!(rownames(res) %in% rownames(toptags)),]
p1<-ggplot(res,aes(x=logCPM,y=logFC)) +
labs(x="Mean transcript abundance (log CPM)", y="Differential expression (log FoldChange)") +
geom_point(data=highlight_nonsig, aes(x=logCPM,y=logFC),col="black",alpha=0.2,size=2) +
geom_point(data=highlight_df2,aes(x=logCPM,y=logFC,col="red"),alpha=0.2,size=2)  +
geom_point(data=highlight_dfA, aes(x=logCPM,y=logFC),pch=2,size=3,color="aquamarine3") +
geom_point(data=highlight_dfG, aes(x=logCPM,y=logFC),pch=2,size=3,color="darkmagenta") + theme(legend.position = "none") +
ggrepel::geom_text_repel(data=highlight_dfA,aes(x=logCPM,y=logFC,label=rownames(highlight_dfA)),size = 2) +
ggrepel::geom_text_repel(data=highlight_dfG,aes(x=logCPM,y=logFC,label=rownames(highlight_dfG)),size = 2) + theme_classic() +theme(legend.position = "none")
rightplots<-plot_grid(pa,pg,ncol=1,align="v",labels=c("B","C"))
cp<-plot_grid(p1,rightplots,ncol=2,labels=c("A",""),rel_widths = c(1.5,1))
ggdraw(add_sub(cp,"Figure. Differentially expressed transcripts for alpha and gamma in EGind4. Transcript abundance and differential expression are shown, \nwith transcripts with significant expression differences in red (FDR < 0.0001). Negative logFC values indicate higher expression in slime gland compared to skin. \nTranscripts corresponding to alpha and gamma are annotated. Phylogenetic identification of alpha (B) and gamma (C).",x=0,hjust=0,size=10))
dev.off()
tophagA
nothagA
atr$tip.label[!(atr$tip.label %in% atrFilt$tip.label)]
gtr$tip.label[!(gtr$tip.label %in% gtrFilt$tip.label)]
cbind.data.frame(tag=c(filtA,filtG),tree=c(rep("alpha",length(filtA)),rep("gamma",length(filtG))))
filtA<-atr$tip.label[!(atr$tip.label %in% atrFilt$tip.label)]
filtG<-gtr$tip.label[!(gtr$tip.label %in% gtrFilt$tip.label)]
cbind.data.frame(tag=c(filtA,filtG),tree=c(rep("alpha",length(filtA)),rep("gamma",length(filtG))))
filtered<-cbind.data.frame(tag=c(filtA,filtG),tree=c(rep("alpha",length(filtA)),rep("gamma",length(filtG))))
write.csv(c(filtered),"filtered_tags.csv")
res["Estoutii_057303",]
#runEdgeRmds(quantfiles,cols,sample_meta)
##############################################
### pairwise comparisons between libraries ###
##############################################
salmonquantfiles<-quantfiles;colors<-cols;meta<-sample_meta
txi.salmon<- tximport(salmonquantfiles, type = "salmon", txOut=T, dropInfReps=TRUE)
cts <- txi.salmon$counts
cts["Estoutii_057303",]
cts
cts["EGind4_t.25491",]
rowSums(cpm(cts)>10.0)
cpm(cts["EGind4_t.25491",])
cpm(cts["EGind4_t.25491",])
cts[c(atr$tip.label,gtr$tip.label),]
cts[c(atr$tip.label,gtr$tip.label) %in% rownames(cts),]
c(atr$tip.label,gtr$tip.label) %in% rownames(cts))
c(atr$tip.label,gtr$tip.label) %in% rownames(cts)
mytags<-c(atr$tip.label[atr$tip.label %in% rownames(cts)], gtr$tip.label) %in% gtr$tip.label[gtr$tip.label %in% rownames(cts)])
mytags<-c(atr$tip.label[atr$tip.label %in% rownames(cts)] %in% gtr$tip.label[gtr$tip.label %in% rownames(cts)])
mytags
mytags<-c(atr$tip.label[atr$tip.label %in% rownames(cts)],gtr$tip.label[gtr$tip.label %in% rownames(cts)])
mytags
cts[mytags,]
cts <- txi.salmon$counts
cts[mytags,]
# tags2find<-read.csv("EGtags.csv",header=T) #MSP
# cts[tags2find$transcript.name,]
#keep <- rowSums(cpm(cts)>10.0) >= length(groups) #keeps tags which are 10+ in every library
keep <- rowSums(cpm(cts)>10.0) >= 3 #MSP keeps tags which are 10+ in at least 3 libraries
cts2<- cts[keep,]
cts2[mytags,]
cts2[mytags %in% rownames(cts2),]
mytags
cts2[rownames(cts2) %in% mytags,]
nrow(cts2[rownames(cts2) %in% mytags,])
nrow(cts2[mytags,])
nrow(cts[mytags,])
cts[mytags,]
head(cts[mytags,])
head(cts2[rownames(cts2) %in% mytags,])
head(cts2[sort(rownames(cts2) %in% mytags),])
head(cts[sort(mytags),])
(cts[sort(mytags),])
head(cts2[sort(rownames(cts2) %in% mytags),])
cts2["EGind4_t.113443",]
mytags[mytags %in% rownames(cts2)]
mytags[mytags %in% rownames(cts)]
cts["EGind4_t.25491",]
cpm(cts["EGind4_t.25491",])
ctscpm<-cpm(cts)
ctscpm["EGind4_t.25491",]
ctscpm["EGind4_t.50241",]
#keep <- rowSums(cpm(cts)>10.0) >= length(groups) #keeps tags which are 10+ in every library
keep <- rowSums(cpm(cts)>100.0) >= 3 #MSP keeps tags which are 10+ in at least 3 libraries
cts<- cts[keep,]
dim(cts)
cts[rownames(cts) %in% mytags,] #28TAGS
atr<-read.tree("../trees/alpha_pruned.txt")
plot(atr)
dev.off()
plot(atr)
atr<-read.tree("../trees/alpha_pruned.txt")
atr
atr<-read.tree("../trees/alpha_pruned.txt")
plot(atr)
plot(atr)
plot(atr)
atr
atr<-read.tree("../trees/alpha_pruned.txt")
atr
atr<-read.tree("../trees/alpha_pruned.txt")
atr
plot(atr)
plot(atr,cex=0.3)
plot(atr,cex=0.3,no.margin=T)
atr<-read.tree("../trees/alpha_11_8.tre")
atr<-read.nexus("../trees/alpha_11_8.tre")
atr<-ape::read.nexus("../trees/alpha_11_8.tre")
atr
atr<-ape::read.nexus("../trees/alpha_11_8.tre")
str(atr)
atr<-ape::read.tree("../trees/alpha_11_8.tr3e")
atr<-ape::read.tree("../trees/alpha_11_8.tree")
atr
plot(atr)
atr<-ape::ladderize(read.tree("../trees/alpha_11_8.tree"))
plot(atr)
atr$tip.label<-unlist(lapply(atr$tip.label,function(x) strsplit(x,"..",fixed=T)[[1]][[1]])) %>% gsub("'","",.,fixed=T)
atr$tip.label<-gsub("-.*","",atr$tip.label)
atr$tip.label<-gsub("(Estoutii_\\d+)_\\d+","\\1",atr$tip.label,perl=T)
bothtags<-c(out$tag,tmp$tag)
tophagA<-which(atr$tip.label %in% bothtags); nothagA<-grep("EGind|Estoutii",atr$tip.label,invert=T)
atrFilt<-ape::keep.tip(atr,c(tophagA,nothagA))
filtA<-atr$tip.label[!(atr$tip.label %in% atrFilt$tip.label)]
plot(atr)
plot(filtA)
filtA
plot(atrFilt)
nodelabels(cex=1)
ape::nodelabels(cex=1)
ape::nodelabels(cex=1,bty="n")
plot(atrFilt)
ape::nodelabels(cex=1,bty="n")
ape::nodelabels(cex=1,bg="n")
plot(atrFilt)
ape::nodelabels(cex=1,frame="none")
#TODO prune off outgroups, then collapse nodes based on support < 75
# get new node numbers, use to collapse outgroup clade in ggtree
ape::extract.clade(atr,node=117)
#TODO prune off outgroups, then collapse nodes based on support < 75
# get new node numbers, use to collapse outgroup clade in ggtree
atr<-ape::extract.clade(atr,node=117)
plot(atr)
plot(atr); nodelabels(frame='none') #prune at node 116
plot(atr); ape::nodelabels(frame='none') #prune at node 116
#TODO prune off outgroups, then collapse nodes based on support < 75
# get new node numbers, use to collapse outgroup clade in ggtree
atr<-ape::extract.clade(atrFilt,node=117)
plot(atr); ape::nodelabels(frame='none') #prune at node 116
#TODO prune off outgroups, then collapse nodes based on support < 75
# get new node numbers, use to collapse outgroup clade in ggtree
atrFilt<-ape::extract.clade(atrFilt,node=117)
pa<-ggtree(atrFilt,right=T,layout='roundrect') +
geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) +
geom_tiplab(aes(subset=grepl("Estout",label)),color="aquamarine3",size=1)+ xlim(0,6)
collapse(pa,69, 'min')
collapse(pa,69, 'min',fill="red")
pa<-ggtree(atrFilt,right=T,layout='roundrect') +
geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) +
geom_tiplab(aes(subset=grepl("Estout",label)),color="aquamarine3",size=1)+ xlim(0,6)
collapse(pa,69, 'min',fill="white")
pa
as.polytomy(atrFilt, feature='node.label', fun=function(x) as.numeric(sub(".*/", "", x))& sub("/.*", "", x) < 70)
atrFilt
atrFilt2<-as.polytomy(atrFilt, feature='node.label', fun=function(x) as.numeric(sub(".*/", "", x))& sub("/.*", "", x) < 70)
pa<-ggtree(atrFilt2,right=T,layout='roundrect') +
geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) +
geom_tiplab(aes(subset=grepl("Estout",label)),color="aquamarine3",size=1)
pa
ggtree(atrFilt2,right=T,layout='roundrect')
plot(atrFilt2); nodelabels()
plot(atrFilt2); ape::nodelabels()
plot(atrFilt); ape::nodelabels()
atrFilt<-ape::keep.tip(atr,c(tophagA,nothagA))
atr<-ape::ladderize(read.tree("../trees/alpha_11_8.tree")) #new, full alpha tree
atr$tip.label<-unlist(lapply(atr$tip.label,function(x) strsplit(x,"..",fixed=T)[[1]][[1]])) %>% gsub("'","",.,fixed=T)
atr$tip.label<-gsub("-.*","",atr$tip.label)
atr$tip.label<-gsub("(Estoutii_\\d+)_\\d+","\\1",atr$tip.label,perl=T)
atrFilt<-ape::keep.tip(atr,c(tophagA,nothagA))
#TODO prune off outgroups, then collapse nodes based on support < 75
# get new node numbers, use to collapse outgroup clade in ggtree
atrFilt1<-ape::extract.clade(atrFilt,node=118)
atrFilt2<-as.polytomy(atrFilt1, feature='node.label', fun=function(x) as.numeric(sub(".*/", "", x))& sub("/.*", "", x) < 70)
plot(atrFilt2); nodelabels()
plot(atrFilt2); ape::nodelabels()
#TODO prune off outgroups, then collapse nodes based on support < 75
# get new node numbers, use to collapse outgroup clade in ggtree
atrFilt1<-ape::extract.clade(atrFilt,node=119)
atrFilt2<-as.polytomy(atrFilt1, feature='node.label', fun=function(x) as.numeric(sub(".*/", "", x))& sub("/.*", "", x) < 70)
plot(atrFilt2); ape::nodelabels()
pa<-ggtree(atrFilt2,right=T,layout='roundrect') +
geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) +
geom_tiplab(aes(subset=grepl("Estout",label)),color="aquamarine3",size=1)+ xlim(0,6)
collapse(pa,33, 'min',fill="white")
pa
pa<-ggtree(atrFilt2,right=T,layout='roundrect') +
geom_tiplab(aes(subset=grepl("Estout",label)==F & isTip),color="black",size=1) +
geom_tiplab(aes(subset=grepl("Estout",label)),color="aquamarine3",size=1)+ xlim(0,6)
BiocManager::valid()
BiocManager::install("ggtree")
version("ggtree")
library("ggtree")
